trk.class<-class(trk)
# nest by id
nesttrk<-trk%>%nest(-id)
nesttrk
#' We can add a columns to each nested column of data using purrr::map
trk <- trk %>% nest(-id) %>%
mutate(
dir_abs = map(
data,
~ direction_abs(., full_circle = TRUE, zero = "N")
%>% as_degree()
) ,
dir_rel = map(data, ~ direction_rel(.)
%>% as_degree()),
sl = map(data, step_lengths),
nsd_ = map(data, nsd)
) %>% unnest()
#' Now, calculate month, year, hour, week of each observation and append these to the dataset
#' Unlike the movement charactersitics, these calculations can be done all at once,
#' since they do not utilize successive observations (like step lengths and turn angles do).
trk<-trk%>%
mutate(
week=week(t_),
month = month(t_, label=TRUE),
year=year(t_),
hour = hour(t_)
)
#' Lets take a look at what we created
trk <- trk %>% group_by(id)
trk
#' look at net-squared displacement
ggplot(trk, aes(x = t_, y=nsd_)) + geom_point()+
facet_wrap(~id, scales="free")
filter(trk, id == "5784")
#' some data points look a little off
#' we can identify them to investiage further and remove them
#' if needs be
filter(trk,id=="5784" & nsd_ < 1e+11)
#' some data points look a little off
#' we can identify them to investiage further and remove them
#' if needs be
tail(filter(trk,id=="5784" & nsd_ < 1e+11))
filter(trk,id=="5784"
)
filter(trk,id=="5784", 100)
test <- filter(trk,id=="5784")
test
plot(test$x_,test$y_)
filter(test, x_ >-850000)
filter(test, x_ >-850000)
filter(test, x_ <-850000)
filter(test, x_ < -850000)
filter(test, x_ > -850000)
library(ggmap)
test
qmplot(x_,
y_,
data = test,
maptype = "toner-lite",
color = I("red"))
#' We can map the data
#' turn back to lat long
# try the amt package
trk_map <-
mk_track(
ga_nam,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
)
qmplot(x_,
y_,
data = trk_map,
maptype = "toner-lite",
color = I("red"))
test
test <- filter(trk_map, id == "5784")
test
qmplot(x_,
y_,
data = test,
maptype = "toner-lite",
color = I("red"))
install.packages("ggmap")
library(ggmap)
install.packages("ggmap")
install.packages("ggmap")
#########################################################################
#' Vulture comparative analysis
#' tutorials here https://www.jessesadler.com/post/gis-with-r-intro/
#' and here https://www.r-spatial.org/
#' 06 November 2018
#' 1_load_data - this loads in all of the tracking data and binds it
#########################################################################
#' Load the required packages
library(readr)
library(tidyverse)
#' Section 1: Load the data ----
data_path <- "raw_data"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
mydata <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
#' filter the data to remove obvious outliers
mydata <- filter(mydata, lat < 20 & lat > -40 & long > 10)
head(mydata)
tail(mydata)
str(mydata)
levels(as.factor(mydata$study))
install.packages("ggmap")
library(ggmap)
# WBV Namibia Vulture Tracking Dataset
library(lubridate)
library(SDLfilter)
library(amt)
library(sp)
# ga_nam
# select ga_nam data which is data from everything
ga_nam <- filter(mydata, study == "ga_nam")
ga_nam
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier).
ind2<-ga_nam %>% select(long, lat, id) %>%
duplicated
sum(ind2)
# remove them
ga_nam$dups <- ind2
ga_nam <- filter(ga_nam,dups=="FALSE")
ga_nam
# set the time column
levels(factor(ga_nam$id))
# can look at an individual level with
(filter(ga_nam,id=="5864"))
# all of the data is in the format of day-month-year
ga_nam$New_time<-parse_date_time(x=ga_nam$time,c("%d/%m/%Y %H:%M"))
#' all of the data is in the format of day-month-year
#' time zone is UTC by default
ga_nam$New_time <-
parse_date_time(x = ga_nam$time, c("%d/%m/%Y %H:%M"))
#' keep only the new time data
ga_nam <- select(ga_nam, New_time,long,lat,id,species,study)
ga_nam <- rename(ga_nam, time = New_time)
ga_nam
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
names(ga_nam)[names(ga_nam) == 'time'] <- 'DateTime'
SDLfilterData <-
ddfilter.speed(data.frame(ga_nam), vmax = 70, method = 1)
length(SDLfilterData$DateTime)
#' rename everything as before
ga_nam <- SDLfilterData
names(ga_nam)[names(ga_nam) == 'DateTime'] <- 'time'
# check the minimum time and the maximum time
min_time <- ga_nam %>% group_by(id) %>% slice(which.min(time))
data.frame(min_time)
max_time <- ga_nam %>% group_by(id) %>% slice(which.max(time))
data.frame(max_time)
#' one of the IDs (5863) has a date in 2025!
#' This seems to be only the last few rows
#' We can delete anything that comes after a certain date
ga_nam <- ga_nam %>% filter(time < "2019-01-01")
#' determine the length of time each bird was tracked for
difftime(max_time$time, min_time$time, units = "days")
#' check the dates again
max_time <- ga_nam %>% group_by(id) %>% slice(which.max(time))
data.frame(max_time)
# try the amt package
trk <-
mk_track(
ga_nam,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
) %>%
transform_coords(
sp::CRS(
#' we can transform the CRS of the data to an equal area projection
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
#' summarise the sampling rate
trk %>% nest(-id) %>% mutate(sr = map(data, summarize_sampling_rate)) %>%
dplyr::select(id, sr) %>% unnest %>% arrange(id)
#' Save the class here (and apply it later after adding columns to the
#' object)
trk.class<-class(trk)
# nest by id
nesttrk<-trk%>%nest(-id)
nesttrk
#' We can add a columns to each nested column of data using purrr::map
trk <- trk %>% nest(-id) %>%
mutate(
dir_abs = map(
data,
~ direction_abs(., full_circle = TRUE, zero = "N")
%>% as_degree()
) ,
dir_rel = map(data, ~ direction_rel(.)
%>% as_degree()),
sl = map(data, step_lengths),
nsd_ = map(data, nsd)
) %>% unnest()
#' Now, calculate month, year, hour, week of each observation and append these to the dataset
#' Unlike the movement charactersitics, these calculations can be done all at once,
#' since they do not utilize successive observations (like step lengths and turn angles do).
trk<-trk%>%
mutate(
week=week(t_),
month = month(t_, label=TRUE),
year=year(t_),
hour = hour(t_)
)
#' Now, we need to again tell R that this is a track (rather
#' than just a data frame)
class(trk)
class(trk)<-trk.class
#' Lets take a look at what we created
trk <- trk %>% group_by(id)
trk
library(ggmap)
#' We can map the data
#' turn back to lat long
# try the amt package
trk_map <-
mk_track(
ga_nam,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
)
test <- filter(trk_map, id == "5784")
qmplot(x_,
y_,
data = test,
maptype = "toner-lite",
color = I("red"))
library(ggmap)
#' We can map the data
#' turn back to lat long
# try the amt package
trk_map <-
mk_track(
ga_nam,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
)
test <- filter(trk_map, id == "5784")
qmplot(x_,
y_,
data = test,
maptype = "toner-lite",
color = I("red"))
library(tidyverse)
library(ggplot2)
test <- filter(trk_map, id == "5784")
qmplot(x_,
y_,
data = test,
maptype = "toner-lite",
color = I("red"))
qmplot(x_,
y_,
data = trk_map,
maptype = "toner-lite",
color = I("red"))
library(ggmap)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggmap)
qmplot(x_,
y_,
data = trk_map,
maptype = "toner-lite",
color = I("red"))
test <- filter(trk_map, id == "5784")
trk_map
library(tidyverse)
test <- filter(trk_map, id == "5784")
qmplot(x_,
y_,
data = test,
maptype = "toner-lite",
color = I("red"))
# WBV Namibia Vulture Tracking Dataset
library(lubridate)
library(SDLfilter)
library(amt)
library(sp)
# ga_nam
# select ga_nam data which is data from everything
ga_nam <- filter(mydata, study == "ga_nam")
ga_nam
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier).
ind2<-ga_nam %>% select(long, lat, id) %>%
duplicated
sum(ind2)
# remove them
ga_nam$dups <- ind2
ga_nam <- filter(ga_nam,dups=="FALSE")
ga_nam
test(filter,ga_nam, id == "5784")
test<- filter(ga_nam, id == "5784")
qmplot(long,
lat,
data = test,
maptype = "toner-lite",
color = I("red"))
test<- filter(ga_nam, id == "5785")
qmplot(long,
lat,
data = test,
maptype = "toner-lite",
color = I("red"))
#########################################################################
#' Vulture comparative analysis
#' tutorials here https://www.jessesadler.com/post/gis-with-r-intro/
#' and here https://www.r-spatial.org/
#' 06 November 2018
#' 1_load_data - this loads in all of the tracking data and binds it
#########################################################################
#' Load the required packages
library(readr)
library(tidyverse)
#' Section 1: Load the data ----
data_path <- "raw_data"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
mydata <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
#' filter the data to remove obvious outliers
mydata <- filter(mydata, lat < 20 & lat > -40 & long > 10)
head(mydata)
tail(mydata)
str(mydata)
levels(as.factor(mydata$study))
library(lubridate)
library(SDLfilter)
library(amt)
library(sp)
# select swazi data which is the data we tracked in Swaziland
swazi_data <- filter(mydata, study == "swazi")
swazi_data
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier).
ind2<-swazi_data %>% select(time, long, lat, id) %>%
duplicated
sum(ind2)
# remove them
swazi_data$dups <- ind2
swazi_data <- filter(swazi_data,dups=="FALSE")
swazi_data
# set the time column
levels(factor(swazi_data$id))
# can look at an individual level with
(filter(swazi_data,id=="ID1"))
# all of the data is in the format of day-month-year
swazi_data$New_time<-parse_date_time(x=swazi_data$time,c("%d/%m/%Y %H:%M"))
# keep only the new time data
swazi_data <- select(swazi_data, New_time,long,lat,id,species,study)
swazi_data <- rename(swazi_data, time = New_time)
swazi_data
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
names(swazi_data)[names(swazi_data) == 'time'] <- 'DateTime'
SDLfilterData<-ddfilter.speed(data.frame(swazi_data), vmax = 70, method = 1)
length(SDLfilterData$DateTime)
#' rename everything as before
swazi_data <- SDLfilterData
names(swazi_data)[names(swazi_data) == 'DateTime'] <- 'time'
# check the minimum time and the maximum time
min_time <- swazi_data %>% group_by(id) %>% slice(which.min(time))
data.frame(min_time)
max_time <- swazi_data %>% group_by(id) %>% slice(which.max(time))
data.frame(max_time)
#' determine the length of time each bird was tracked for
difftime(max_time$time, min_time$time, units = "days")
#' try the amt package
trk <-
mk_track(
swazi_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326"))  %>%
transform_coords(
sp::CRS( #' we can transform the CRS of the data to an equal area projection
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
#' summarise the sampling rate
trk %>% nest(-id) %>% mutate(sr = map(data, summarize_sampling_rate)) %>%
dplyr::select(id, sr) %>% unnest %>% arrange(id)
#' Save the class here (and apply it later after adding columns to the
#' object)
trk.class<-class(trk)
# nest by id
nesttrk<-trk%>%nest(-id)
nesttrk
#' We can add a columns to each nested column of data using purrr::map
trk <- trk %>% nest(-id) %>%
mutate(
dir_abs = map(
data,
~ direction_abs(., full_circle = TRUE, zero = "N")
%>% as_degree()
) ,
dir_rel = map(data, ~ direction_rel(.)
%>% as_degree()),
sl = map(data, step_lengths),
nsd_ = map(data, nsd)
) %>% unnest()
#' Now, calculate month, year, hour, week of each observation and append these to the dataset
#' Unlike the movement charactersitics, these calculations can be done all at once,
#' since they do not utilize successive observations (like step lengths and turn angles do).
trk<-trk%>%
mutate(
week=week(t_),
month = month(t_, label=TRUE),
year=year(t_),
hour = hour(t_)
)
#' Now, we need to again tell R that this is a track (rather
#' than just a data frame)
class(trk)
class(trk)<-trk.class
#' Lets take a look at what we created
trk <- trk %>% group_by(id)
trk
#' ### Absolute angles (for each movement) relative to North
#' We could use a rose diagram (below) to depict the distribution of angles.
#+fig.height=12, fig.width=12
ggplot(trk, aes(x = dir_abs, y = ..density..)) + geom_histogram(breaks = seq(0, 360, by = 20)) +
coord_polar(start = 0) + theme_minimal() +
scale_fill_brewer() + ylab("Density") + ggtitle("Angles Direct") +
scale_x_continuous(
"",
limits = c(0, 360),
breaks = seq(0, 360, by = 20),
labels = seq(0, 360, by = 20)
) +
facet_wrap( ~ id)
#' look at net-squared displacement
ggplot(trk, aes(x = t_, y = nsd_)) + geom_point() +
facet_wrap(~ id, scales = "free")
#' We can map the data
#' turn back to lat long
# try the amt package
trk_map <-
mk_track(
ck_tanz_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
)
#' We can map the data
#' turn back to lat long
# try the amt package
trk_map <-
mk_track(
swazi_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
)
library(ggmap)
qmplot(x_,
y_,
data = trk_map,
maptype = "toner-lite",
color = I("red"))
#' convert our regularised data back into a trk type data frame
mcps <- trk %>% nest(-id) %>%
mutate(mcparea = map(data, ~ hr_mcp(., levels = c(0.95)) %>% hr_area)) %>%
select(id, mcparea) %>% unnest()
mcps$area <- mcps$area / 1000000
mcps %>% arrange(id)
#+fig.height=12, fig.width=12, warning=FALSE, message=FALSE
ggplot(mcps, aes(x = id, y = area)) + geom_point() +
geom_smooth()
#' Same for KDE
kde <- trk %>% nest(-id) %>%
mutate(kdearea = map(data, ~ hr_kde(., levels = c(0.95)) %>% hr_area)) %>%
select(id, kdearea) %>% unnest()
kde$kdearea <-  kde$kdearea / 1000000
kde %>% arrange(id)
