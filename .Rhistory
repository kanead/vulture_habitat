raw_data <- as.data.frame(spTransform(raw_data, newProj))
library(sp)
# load data provided from the online repository
fulmarURL <- "https://datadryad.org/bitstream/handle/10255/dryad.174482/"
fileName <- "Fulmar_trackingData.csv?sequence=1"
raw_data <- read.csv(url(paste0(fulmarURL,fileName)),
stringsAsFactors = FALSE)
#' we rename some of the column names
raw_data$ID <- raw_data$tripID
#' we format the date
raw_data$Date <- as.POSIXct(raw_data$Date,tz="UTC",
format="%d/%m/%Y %H:%M")
#' we project data from longitude and latitude to a different type of projection system that is in metres
oldProj <- CRS("+proj=longlat +datum=WGS84")
newProj <- CRS("+init=epsg:27700")
#' we specify the coordinates
coordinates(raw_data) <- c("Longitude","Latitude")
proj4string(raw_data) <- oldProj
raw_data <- as.data.frame(spTransform(raw_data, newProj))
raw_data
rm(ls=list())
rm(ls==list())
rm(list=ls())
?require
list.of.packages <- c("sp", "tidyverse")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(sp)
library(tidyverse)
fulmarURL <- "https://datadryad.org/bitstream/handle/10255/dryad.174482/"
fileName <- "Fulmar_trackingData.csv?sequence=1"
raw_data <- read.csv(url(paste0(fulmarURL,fileName)),
stringsAsFactors = FALSE)
rm(raw_data)
head(mydata)
mydata <- read.csv(url(paste0(fulmarURL,fileName)),
stringsAsFactors = FALSE)
head(mydata)
#' pick the relevant columns using the select function
mydata <- select(birdID, tripID, Longitude, Latitude, Date)
#' pick the relevant columns using the select function
mydata <- mydata %>% select(birdID, tripID, Longitude, Latitude, Date)
#' plot the tracks
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = birdID)
library(ggmap)
#' plot the tracks by birdID
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = birdID)
#' plot the tracks by birdID
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = as.factor(birdID))
#' Now plot the tracks by tripID
#' some birds went out on multiple foraging trips
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = as.factor(tripID))
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) +  facet_wrap( ~ id)
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) +  facet_wrap( ~ as.factor(birdID))
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = as.factor(birdID)
)
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) +  facet_wrap( ~ (birdID))
#' Now plot each bird on its own map
#' plot each track on a separate panel using facet
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) +  facet_wrap( ~ (mydata$birdID))
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) +  facet_wrap( ~ (as.factor(mydata$birdID)))
(qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) +    facet_wrap( ~ as.factor(birdID)))
#' plot each track on a separate panel using facet
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) + facets = .~ as.factor(birdID))
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) + facets = .~ as.factor(birdID)
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
)
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) + facet_wrap = .~ as.factor(birdID)
(
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = as.factor(birdID)
) +
facet_wrap( ~ as.factor(birdID))
)
#' plot the data with no background
ggplot(data = mydata, mapping = aes(x = Longitude, y = Latitude)) + geom_point()
#' plot the data with no background
ggplot(data = mydata, mapping = aes(x = Longitude, y = Latitude)) + geom_point(color = as.factor(birdID))
#' plot the data with no background
ggplot(data = mydata, mapping = aes(x = Longitude, y = Latitude, color = as.factor(birdID))) + geom_point()
mydata$birdID <- as.factor(mydata$birdID)
mydata$birdID <- as.factor(mydata$birdID)
#' plot the data with no background
ggplot(data = mydata, mapping = aes(x = Longitude, y = Latitude, color = birdID)) + geom_point()
#' plot the tracks by birdID
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = birdID)
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = birdID,
zoom = 10)
qmplot(Longitude,
Latitude,
data = mydata,
maptype = "toner-lite",
colour = birdID)
(
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "toner-background",
colour = birdID
) +
facet_wrap( ~ birdID)
)
filter(mydata, tripID == "1")
levels(mydata$tripID)
levels(as.factor(mydata$tripID))
view(mydata)
View(mydata)
#' Only one bird went on more than one trip
#' let's remove its second trip so we're comparing
#' like with like across all of the birds
mydata  <- mydata %>% filter(birdID == "1" & tripID == "1")
levels(mydata$tripID)
mydata$tripID <- as.factor(mydata$tripID)
levels(mydata$tripID)
list.of.packages <- c("sp", "tidyverse", "ggmap")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(sp)
library(tidyverse)
library(ggmap)
# load data provided from the online repository
fulmarURL <- "https://datadryad.org/bitstream/handle/10255/dryad.174482/"
fileName <- "Fulmar_trackingData.csv?sequence=1"
mydata <- read.csv(url(paste0(fulmarURL,fileName)),
stringsAsFactors = FALSE)
head(mydata)
#' pick the relevant columns using the select function
mydata <- mydata %>% select(birdID, tripID, Longitude, Latitude, Date)
#' make the birdID and tripID columns factors because they identify the individual birds and their trips
mydata$birdID <- as.factor(mydata$birdID)
mydata$tripID <- as.factor(mydata$tripID)
#' Only one bird went on more than one trip
#' let's remove its second trip so we're comparing
#' like with like across all of the birds
mydata  <- mydata %>% filter(!tripID == "1")
levels(mydata$tripID)
mydata
list.of.packages <- c("sp", "tidyverse", "ggmap")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(sp)
library(tidyverse)
library(ggmap)
# load data provided from the online repository
fulmarURL <- "https://datadryad.org/bitstream/handle/10255/dryad.174482/"
fileName <- "Fulmar_trackingData.csv?sequence=1"
mydata <- read.csv(url(paste0(fulmarURL,fileName)),
stringsAsFactors = FALSE)
head(mydata)
#' pick the relevant columns using the select function
mydata <- mydata %>% select(birdID, tripID, Longitude, Latitude, Date)
#' make the birdID and tripID columns factors because they identify the individual birds and their trips
mydata$birdID <- as.factor(mydata$birdID)
mydata$tripID <- as.factor(mydata$tripID)
#' Only one bird went on more than one trip
#' let's remove its second trip so we're comparing
#' like with like across all of the birds
mydata  <- mydata %>% filter(!tripID == "1") %>%   droplevels()
levels(mydata$tripID)
?qmplot
#' Now plot each bird on its own map
#' plot each track on a separate panel using facet
(
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "terrain-background",
colour = birdID
) +
facet_wrap( ~ birdID)
)
#' Now plot each bird on its own map
#' plot each track on a separate panel using facet
(
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "satellite",
colour = birdID
) +
facet_wrap( ~ birdID)
)
#' Now plot each bird on its own map
#' plot each track on a separate panel using facet
(
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "satellite",
colour = birdID
) +
facet_wrap( ~ birdID)
)
?get_stamenmap
#' Now plot each bird on its own map
#' plot each track on a separate panel using facet
(
qmplot(
Longitude,
Latitude,
data = mydata,
maptype = "terrain",
colour = birdID
) +
facet_wrap( ~ birdID)
)
?distCosine
library(spatial)
mydata
distance_function<-function(x){max(distCosine(c(-3.119722,59.144722), cbind(x$Longitude, x$Latitude)))/1000}
sapply(split(mydata[3:4],mydata$birdID), distance_function)
library(spatial)
distance_function<-function(x){max(distCosine(c(-3.119722,59.144722), cbind(x$Longitude, x$Latitude)))/1000}
sapply(split(mydata[3:4],mydata$birdID), distance_function)
?distCosine
library(geosphere)
distance_function<-function(x){max(distCosine(c(-3.119722,59.144722), cbind(x$Longitude, x$Latitude)))/1000}
sapply(split(mydata[3:4],mydata$birdID), distance_function)
mydata %>% group_by(birdID) %>% select(Longitude, Latitude) %>% distance_function
mydata %>% group_by(birdID) %>% select(Longitude, Latitude) %>% distance_function
mydata %>% group_by(birdID) %>% select(Longitude, Latitude)
mydata %>% group_by(birdID) %>% select(Longitude, Latitude) %>% do_(. distance_function)
mydata %>% group_by(birdID) %>% select(Longitude, Latitude) %>% do_(., distance_function)
#' this is a custom function which takes the colony coordinates and the data from our tracks
#' It uses these data to calculate the maximum distance from the colony using distCosine, a function from the package geosphere
distance_function<-function(x){max(distCosine(c(-3.119722,59.144722), cbind(x$Longitude, x$Latitude)))/1000}
#' we extract the columns that correspond to longitude and latitude and apply our function to each birdID separately
sapply(split(mydata[3:4],mydata$birdID), distance_function)
write.table(mydata, "fulmar.csv", row.names = F)
distm (c(-3.119722,59.144722), c(mydata$Longitude, mydata$Latitude), fun = distHaversine)
distm (c(-3.119722,59.144722), c(-3.119722, 60), fun = distHaversine)
distm (c(-3.119722,59.144722), c(-3.119722, 60), fun = distHaversine) / 1000
distm (c(-3.119722,59.144722), c(0.24, 57.6), fun = distHaversine) / 1000
#' we extract the columns that correspond to longitude and latitude and apply our function to each birdID separately
sapply(split(mydata[3:4],mydata$birdID), distance_function)
data(puechcirc)
x <- puechcirc[1]
x
library(adehabitatHR)
data(puechcirc)
x <- puechcirc[1]
x
lik <- liker(x, sig2 = 58, rangesig1 = c(1, 10))
tata <- kernelbb(x, sig1 = 6.23, sig2 = 58, grid = 50)
tata
image(tata)
plot(getverticeshr(tata, 95), add=TRUE, lwd=2)
data
puechcirc
x
puechcirc[1]
bb.95 <- getverticeshr(tata, percent = 95)
bb.95
#########################################################################
#' Vulture comparative analysis
#' tutorials here https://www.jessesadler.com/post/gis-with-r-intro/
#' and here https://www.r-spatial.org/
#' 06 November 2018
#' 1_load_data - this loads in all of the tracking data and binds it
#########################################################################
#' Load the required packages
library(readr)
library(tidyverse)
#' Section 1: Load the data ----
data_path <- "raw_data"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
mydata <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
#' filter the data to remove obvious outliers
mydata <- filter(mydata, lat < 20 & lat > -40 & long > 10)
head(mydata)
tail(mydata)
str(mydata)
levels(as.factor(mydata$study))
# Swaziland Vulture Tracking Dataset
library(lubridate)
library(SDLfilter)
library(amt)
library(sp)
# swazi
# select swazi data which is the data we tracked in Swaziland
swazi_data <- filter(mydata, study == "swazi")
swazi_data
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier).
ind2<-swazi_data %>% select(time, long, lat, id) %>%
duplicated
sum(ind2)
# remove them
swazi_data$dups <- ind2
swazi_data <- filter(swazi_data,dups=="FALSE")
swazi_data
# set the time column
levels(factor(swazi_data$id))
# can look at an individual level with
(filter(swazi_data,id=="ID1"))
# all of the data is in the format of day-month-year
swazi_data$New_time<-parse_date_time(x=swazi_data$time,c("%d/%m/%Y %H:%M"))
# keep only the new time data
swazi_data <- select(swazi_data, New_time,long,lat,id,species,study)
swazi_data <- rename(swazi_data, time = New_time)
swazi_data
#' estimate vmax for threshold speed
#' names(swazi_data)[names(swazi_data) == 'time'] <- 'DateTime'
#' speed.est.data <- swazi_data %>% filter(id == "ID2") %>%  select(id,DateTime,lat,long)
#' speed.est.data$qi = 5
#' est.vmax(sdata = data.frame(speed.est.data))
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
names(swazi_data)[names(swazi_data) == 'time'] <- 'DateTime'
SDLfilterData<-ddfilter.speed(data.frame(swazi_data), vmax = 70, method = 1)
length(SDLfilterData$DateTime)
#' rename everything as before
swazi_data <- SDLfilterData
names(swazi_data)[names(swazi_data) == 'DateTime'] <- 'time'
trk <-
mk_track(
swazi_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326"))  %>%
transform_coords(
sp::CRS( #' we can transform the CRS of the data to an equal area projection
#' https://epsg.io/102022
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
trk$x_
loc <-
move(
x = trk$x_,
y = trk$y_,
time = trk$t_,
proj = CRS("+proj=utm"),
data = trk,
animal = trk$id
)
#' Dynamic Brownian Bridge Models Using move Package
#' load the move package
require(move)
loc <-
move(
x = trk$x_,
y = trk$y_,
time = trk$t_,
proj = CRS("+proj=utm"),
data = trk,
animal = trk$id
)
track <- data.frame(trk)
#' create a move object
loc <-
move(
x = track$x_,
y = track$y_,
time = track$t_,
proj = CRS( "+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"),
data = track,
animal = track$id
)
track
trk <-
mk_track(
swazi_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
)  %>%
transform_coords(
sp::CRS(
#' we can transform the CRS of the data to an equal area projection
#' https://epsg.io/102022
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
trk
?sort
track <- arrange(track, id)
track
#' create a move object
loc <-
move(
x = track$x_,
y = track$y_,
time = track$t_,
proj = CRS( "+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"),
data = track,
animal = track$id
)
50*2
?brownian.bridge.dyn
#' Now create a dBBMM object
dbbmm <-
brownian.bridge.dyn(
object = loc,
location.error = 18,
window.size = 360,
margin = 7,
raster = 100
)
dbbmm <-
brownian.bridge.dyn(
object = loc,
location.error = 18,
window.size = 101,
margin = 7,
raster = 100
)
writeRaster(dbbmm, filename='brownian_bridges/swazi_dbbm.tif', overwrite=TRUE)
plot(dbbmm)
contour(dbbmm, add=T, levels=c(.5,.95))
str(dbbmm)
