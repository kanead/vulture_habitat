)
# Final Map
m <- leaflet(Samp) %>%
addTiles()  %>%
# setView( lat=-27, lng=170 , zoom=4) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
~ long,
~ lat,
fillOpacity = 0.7,
color = ~ pal(species),
radius = 3,
stroke = FALSE
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~ species,
title = "Species",
opacity = 1
)
m
Samp
mydata
#' map a sample of the data
Samp <- mydata %>% sample_n(size=100000)
Samp
plot(Samp$long, Samp$lat)
library(ggmap)
qmplot(long,
lat,
data = Samp,
maptype = "toner-lite")
#' using leaflet
#' Library
library(leaflet)
#' Remove the suspected hybrid species and unknown vul
species_for_removal<-c("cv_wb", "vul")
Samp <- Samp %>% filter(!id %in% species_for_removal)
levels(as.factor(Samp$id))
levels(as.factor(Samp$species))
# Call RColorBrewer::display.brewer.all() to see all possible palettes
pal <- colorFactor(
palette = 'Accent',
domain = Samp$species
)
# Final Map
m <- leaflet(Samp) %>%
addTiles()  %>%
# setView( lat=-27, lng=170 , zoom=4) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
~ long,
~ lat,
fillOpacity = 0.7,
color = ~ pal(species),
radius = 3,
stroke = FALSE
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~ species,
title = "Species",
opacity = 1
)
m
#' map a sample of the data
Samp <- mydata %>% sample_n(size=100000)
Samp
plot(Samp$long, Samp$lat)
#' using leaflet
#' Library
library(leaflet)
#' Remove the suspected hybrid species and unknown vul
species_for_removal<-c("cv_wb", "vul")
Samp <- Samp %>% filter(!id %in% species_for_removal) %>%
droplevels()
levels(as.factor(Samp$id))
levels(as.factor(Samp$species))
# Call RColorBrewer::display.brewer.all() to see all possible palettes
pal <- colorFactor(
palette = 'Accent',
domain = Samp$species
)
# Final Map
m <- leaflet(Samp) %>%
addTiles()  %>%
# setView( lat=-27, lng=170 , zoom=4) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
~ long,
~ lat,
fillOpacity = 0.7,
color = ~ pal(species),
radius = 3,
stroke = FALSE
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~ species,
title = "Species",
opacity = 1
)
m
levels(as.factor(Samp$species))
Samp <- Samp %>% filter(!id %in% species_for_removal) %>%
droplevels()
levels(as.factor(Samp$id))
levels(as.factor(Samp$species))
Samp <- Samp %>% filter(!id %in% species_for_removal) %>% droplevels()
levels(as.factor(Samp$id))
levels(as.factor(Samp$species))
Samp %>% filter(!id %in% species_for_removal)
#' using leaflet
#' Library
library(leaflet)
#' Remove the suspected hybrid species and unknown vul
species_for_removal<-c("cv_wb", "vul")
Samp <- Samp %>% filter(!species %in% species_for_removal) %>% droplevels()
levels(as.factor(Samp$id))
levels(as.factor(Samp$species))
# Final Map
m <- leaflet(Samp) %>%
addTiles()  %>%
# setView( lat=-27, lng=170 , zoom=4) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
~ long,
~ lat,
fillOpacity = 0.7,
color = ~ pal(species),
radius = 3,
stroke = FALSE
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~ species,
title = "Species",
opacity = 1
)
m
# Call RColorBrewer::display.brewer.all() to see all possible palettes
pal <- colorFactor(
palette = 'Accent',
domain = Samp$species
)
rm(gyps)
levels(as.factor(Samp$species))
#' map with just the gyps
not_gyps <-c("hv", "lf", "wh")
#' map with just the gyps
not_gyps <-c("hv", "lf", "wh")
gyps <- Samp %>% filter(!species %in% not_gyps) %>% droplevels()
#' map with just the gyps
not_gyps <-c("hv", "lf", "wh")
gyps <- Samp %>% filter(!species %in% not_gyps) %>% droplevels()
# Final Map
m <- leaflet(gyps) %>%
addTiles()  %>%
# setView( lat=-27, lng=170 , zoom=4) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
~ long,
~ lat,
fillOpacity = 0.7,
color = ~ pal(species),
radius = 3,
stroke = FALSE
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~ species,
title = "Species",
opacity = 1
)
m
?addLegend()
#' Code for extracting summary statistics from the comparative vulture project
#' Summarise the temporal resolution of the tracking data first
#' Load the required packages
library(readr)
library(tidyverse)
#' Section 1: Load the data ----
data_path <- "track_resolution_summary"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
res_data <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
res_data
#' associate a broad geographic location with each study
#' CK = east
#' masai = east
#' north = east
#' GA_Namibia = south
#' inter = south
#' Kerri = south
#' mend_Namibia = south
#' Morgan = south
#' Swazi = south
#' andre = south
#' ralph = south
res_data$region <- if_else(res_data$study == "CK" | res_data$study == "masai" | res_data$study == "north", "east", "south")
#'export the combined summary stats table for the temporal resolution of the data
write.csv(res_data, file="results/summary_all_tracks.csv", row.names = FALSE)
#' run some analyses on the data
#' extract data for birds that were tracked for over a year and remove some suspect data
#'the double releases from Kerri
nonWantedLevels<-c("AG382", "AM89", "AM88", "AM87")
subset <- res_data %>% filter(!id %in% nonWantedLevels)
levels(as.factor(subset$id))
#' how long were the birds tracked for?
p0 <- ggplot(data = subset, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw()
p0 + theme(legend.position = "none")
#' keep only the birds that were tracked for over a year
subset <- filter(subset, duration > 365)
#' boxplots of the KDEs by speices
ggplot(data = subset, mapping = aes(x = species, y = kde)) + geom_boxplot() + ylab("KDE 95%")
#' boxplots of the KDEs by region
ggplot(data = subset, mapping = aes(x = region, y = kde)) + geom_boxplot() + ylab("KDE 95%")
#' group by species and get the mean kde
subset %>% group_by(species) %>% summarize(mean_kde = mean(kde))
#' group by species and get the max kde
subset %>% group_by(species) %>% summarize(max_kde = max(kde))
#' group by species and get the median kde
subset %>% group_by(species) %>% summarize(median_kde = median(kde))
#' extract one species and get its max kde
filter(subset, species == "cv") %>% summarize(maxkde = max(kde))
#' group by region and get the median kde
subset %>% group_by(region) %>% summarize(median_kde = median(kde))
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none")
#' extract just the gyps for all durations
gyps <- subset %>% filter(species == c("cv","rv","wb"))
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none")
view(res_data)
hist(res_data$duration)
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none") + geom_jitter()
#' Code for extracting summary statistics from the comparative vulture project
#' Summarise the temporal resolution of the tracking data first
#' Load the required packages
library(readr)
library(tidyverse)
#' Section 1: Load the data ----
data_path <- "track_resolution_summary"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
res_data <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
res_data
#' associate a broad geographic location with each study
#' CK = east
#' masai = east
#' north = east
#' GA_Namibia = south
#' inter = south
#' Kerri = south
#' mend_Namibia = south
#' Morgan = south
#' Swazi = south
#' andre = south
#' ralph = south
res_data$region <- if_else(res_data$study == "CK" | res_data$study == "masai" | res_data$study == "north", "east", "south")
#'export the combined summary stats table for the temporal resolution of the data
write.csv(res_data, file="results/summary_all_tracks.csv", row.names = FALSE)
#' run some analyses on the data
#' extract data for birds that were tracked for over a year and remove some suspect data
#'the double releases from Kerri
nonWantedLevels<-c("AG382", "AM89", "AM88", "AM87")
subset <- res_data %>% filter(!id %in% nonWantedLevels)
levels(as.factor(subset$id))
max(subset$duration)
head(max(subset$duration))
nonWantedLevels<-c("AG382", "AM89", "AM88", "AM87")
subset <- res_data %>% filter(!id %in% nonWantedLevels)
levels(as.factor(subset$id))
#' how long were the birds tracked for?
p0 <- ggplot(data = subset, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw()
p0 + theme(legend.position = "none")
#' extract just the gyps for all durations
gyps <- subset %>% filter(species == c("cv","rv","wb"))
subset
rm(gyps)
#' extract just the gyps for all durations
gyps <- subset %>% filter(species == c("cv","rv","wb"))
subset
#' extract just the gyps for all durations
gyps <- subset %>% filter(species == c("cv","rv","wb"))
gyps
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none") + geom_jitter()
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none")
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none", axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")))
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none", axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
#' subset to Gyps
gyps_year <- year %>% filter(species == c("cv","rv","wb"))
library(tidyverse)
#' keep only the birds that were tracked for over a year
year <- filter(subset, duration > 365)
#' subset to Gyps
gyps_year <- year %>% filter(species == c("cv","rv","wb"))
#' subset to Gyps
gyps_year <- year %>% filter(species == c("cv","rv","wb"))
p1 <- ggplot(data = gyps_year, mapping = aes(x = species, y = kde, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p1
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(gyps_year$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p2 = p1 + coord_cartesian(ylim = ylim1*1.05) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p2
#' plot white backs by region
wb <- gyps_year %>% filter(species == c("wb"))
p3 <- ggplot(data = wb, mapping = aes(x = region, y = kde, fill = factor(region))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p3
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(wb$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*1.05) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*1.5) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*5) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*2) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*2.5) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
wb
#' Code for extracting summary statistics from the comparative vulture project
#' Summarise the temporal resolution of the tracking data first
#' Load the required packages
library(readr)
library(tidyverse)
#' Section 1: Load the data ----
data_path <- "track_resolution_summary"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
res_data <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
res_data
#' associate a broad geographic location with each study
#' CK = east
#' masai = east
#' north = east
#' GA_Namibia = south
#' inter = south
#' Kerri = south
#' mend_Namibia = south
#' Morgan = south
#' Swazi = south
#' andre = south
#' ralph = south
res_data$region <- if_else(res_data$study == "CK" | res_data$study == "masai" | res_data$study == "north", "east", "south")
#'export the combined summary stats table for the temporal resolution of the data
write.csv(res_data, file="results/summary_all_tracks.csv", row.names = FALSE)
#' run some analyses on the data
#' extract data for birds that were tracked for over a year and remove some suspect data
#'the double releases from Kerri
nonWantedLevels<-c("AG382", "AM89", "AM88", "AM87")
subset <- res_data %>% filter(!id %in% nonWantedLevels)
levels(as.factor(subset$id))
#' how long were the birds tracked for?
p0 <- ggplot(data = subset, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw()
p0 + theme(legend.position = "none")
#' extract just the gyps for all durations
gyps <- subset %>% filter(species == c("cv","rv","wb"))
#' extract just the gyps for all durations
species_to_keep <-c("cv","rv","wb")
gyps <- subset %>% filter(id %in% species_to_keep)
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
gyps <- subset %>% filter(species %in% species_to_keep)
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
#' keep only the birds that were tracked for over a year
year <- filter(subset, duration > 365)
#' boxplots of the KDEs by region
ggplot(data = year, mapping = aes(x = region, y = kde)) + geom_boxplot() + ylab("KDE 95%")
#' group by species and get the mean kde
year %>% group_by(species) %>% summarize(mean_kde = mean(kde))
#' group by species and get the max kde
year %>% group_by(species) %>% summarize(max_kde = max(kde))
#' boxplots of the KDEs by speices
ggplot(data = year, mapping = aes(x = species, y = kde)) + geom_boxplot() + ylab("KDE 95%")
#' group by species and get the median kde
year %>% group_by(species) %>% summarize(median_kde = median(kde))
#' extract one species and get its max kde
filter(year, species == "cv") %>% summarize(maxkde = max(kde))
#' group by region and get the median kde
year %>% group_by(region) %>% summarize(median_kde = median(kde))
#' subset to Gyps that were tracked for over a year
gyps_year <- year %>% filter(species == c("cv","rv","wb"))
p1 <- ggplot(data = gyps_year, mapping = aes(x = species, y = kde, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p1
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(gyps_year$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p2 = p1 + coord_cartesian(ylim = ylim1*1.05) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p2
#' plot white backs by region
wb <- gyps_year %>% filter(species == c("wb"))
p3 <- ggplot(data = wb, mapping = aes(x = region, y = kde, fill = factor(region))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p3
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(wb$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*2.5) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
gyps_year
year
filter(year, study == "swazi")
filter(year, study == "Swazi")
class(year$duration)
levels(year$species)
levels(as.factor(year$species))
gyps_year
year
tail(year)
#' subset to Gyps that were tracked for over a year
gyps_year <- year %>% dplyr::filter(species == c("cv","rv","wb"))
p1 <- ggplot(data = gyps_year, mapping = aes(x = species, y = kde, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p1
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(gyps_year$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p2 = p1 + coord_cartesian(ylim = ylim1*1.05) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p2
#' plot white backs by region
wb <- gyps_year %>% filter(species == c("wb"))
p3 <- ggplot(data = wb, mapping = aes(x = region, y = kde, fill = factor(region))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p3
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(wb$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*2.5) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
wb
#' plot white backs by region
wb <- year %>% filter(species == c("wb"))
p3 <- ggplot(data = wb, mapping = aes(x = region, y = kde, fill = factor(region))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p3
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(wb$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*2.5) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*1.05) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
p4
wb
#' subset to Gyps that were tracked for over a year
gyps_year <- year %>% dplyr::filter(species == c("cv","rv","wb"))
p1 <- ggplot(data = gyps_year, mapping = aes(x = species, y = kde, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p1
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(gyps_year$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p2 = p1 + coord_cartesian(ylim = ylim1*1.05) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p2
#' plot white backs by region
wb <- year %>% dplyr::filter(species == c("wb"))
p3 <- ggplot(data = wb, mapping = aes(x = region, y = kde, fill = factor(region))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("KDE 95% km2") + theme_bw()
p3
#' remove outliers
# compute lower and upper whiskers
ylim1 = boxplot.stats(wb$kde)$stats[c(1, 5)]
# scale y limits based on ylim1
p4 = p3 + coord_cartesian(ylim = ylim1*1.05) + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
p4
gyps <- subset %>% dplyr::filter(species %in% species_to_keep)
#' how long were the gyps tracked for
ggplot(data = gyps, mapping = aes(x = species, y = duration, fill = factor(species))) + geom_boxplot(alpha = 0.5, show.legend = FALSE) + ylab("duration (days)") +
theme_bw() + theme(legend.position = "none", axis.text=element_text(size=20),axis.title=element_text(size=20))
