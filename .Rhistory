.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
) %>%
transform_coords(
sp::CRS(
#' we can transform the CRS of the data to an equal area projection
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
#' summarise the sampling rate
data_summary <- trk %>% nest(-id) %>% mutate(sr = map(data, summarize_sampling_rate)) %>%
dplyr::select(id, sr) %>% unnest %>% arrange(id)
length(levels(as.factor(trk$id)))
#' need to add the arrange function here otherwise the order gets messed up
trk2 <- trk %>%
group_by(id) %>%
mutate(timeDiff = c(NA, difftime(tail(t_, -1), head(t_, -1), units = "hours"))) %>%
mutate(newID = paste(id, cumsum(!is.na(timeDiff) &
timeDiff > 24), sep = "_")) %>% arrange(id, t_) %>%
ungroup()
head(trk2)
tail(trk2)
#' check the number of newIDs
levels(as.factor(trk2$newID))
length(levels(as.factor(trk2$newID)))
#' how long are the tracks now that some of them have been split
sapply(split(trk2$x_, trk2$newID), length)
#' create a trajectory object using adehabitatLT
trk_ltraj <-
as.ltraj(xy = trk2[, c("x_", "y_")],
date = trk2$t_,
id = trk2$newID)
#' rediscretization of the trajectory
tstep <-
14400 # time step we want for the rediscretization, in seconds, 14400 secs = 4 hours
newtr <- redisltraj(trk_ltraj, u = tstep, type = "time")
head(newtr[1])
head(newtr[5])
class(newtr)
#' convert to class data frame
trk3 <- ld(newtr)
head(trk3)
class(trk3$date)
#' we should group the IDs that were split if they had big gaps back together into their original ID structure
#' this involves accessing the name of the new ID that occurs before the underscore
trk3 <- separate(trk3,
col = id,
sep = "_",
into = c("ID", "NA"))
head(trk3)
levels(as.factor(trk3$ID))
length(levels(as.factor(trk$id)))
levels(as.factor(trk$id))
# select ck_tanz data which is Corinne's data from everything
ck_tanz_data <- filter(mydata, study == "ck_tanz")
ck_tanz_data
#' Check for duplicated observations (ones with same lat, long, time,
#'  and individual identifier).
ind2 <- ck_tanz_data %>% dplyr::select(long, lat, id) %>%
duplicated
sum(ind2)
# remove them
ck_tanz_data$dups <- ind2
ck_tanz_data <- filter(ck_tanz_data, dups == "FALSE")
ck_tanz_data
# set the time column
levels(factor(ck_tanz_data$id))
# Corinne Kendall's Tanzania Vulture Tracking Dataset
library(lubridate)
library(SDLfilter)
library(amt)
library(sp)
library(adehabitatLT)
# ck_tanz
# select ck_tanz data which is Corinne's data from everything
ck_tanz_data <- filter(mydata, study == "ck_tanz")
ck_tanz_data
#' Check for duplicated observations (ones with same lat, long, time,
#'  and individual identifier).
ind2 <- ck_tanz_data %>% dplyr::select(long, lat, id) %>%
duplicated
sum(ind2)
# remove them
ck_tanz_data$dups <- ind2
ck_tanz_data <- filter(ck_tanz_data, dups == "FALSE")
ck_tanz_data
# set the time column
levels(factor(ck_tanz_data$id))
# can look at an individual level with
(filter(ck_tanz_data, id == "#109018542"))
#' all of the data is in the format of day-month-year
#' time zone is UTC by default
#' raw data is 2 hours off the real time
#' CK said the recorder started at 6am with hourly points
#' including a relocation at midnight
ck_tanz_data$New_time <-
parse_date_time(x = ck_tanz_data$time, c("%d/%m/%Y %H:%M"), tz = "africa/dar_es_salaam") + hours(2)
# keep only the new time data
ck_tanz_data <-
dplyr::select(ck_tanz_data, New_time, long, lat, id, species, study)
ck_tanz_data <- rename(ck_tanz_data, time = New_time)
ck_tanz_data
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
names(ck_tanz_data)[names(ck_tanz_data) == 'time'] <- 'DateTime'
SDLfilterData <-
ddfilter.speed(data.frame(ck_tanz_data), vmax = 100, method = 1)
length(SDLfilterData$DateTime)
#' rename everything as before
ck_tanz_data <- SDLfilterData
names(ck_tanz_data)[names(ck_tanz_data) == 'DateTime'] <- 'time'
# check the minimum time and the maximum time
min_time <- ck_tanz_data %>% group_by(id) %>% slice(which.min(time))
data.frame(min_time)
max_time <- ck_tanz_data %>% group_by(id) %>% slice(which.max(time))
data.frame(max_time)
#' determine the length of time each bird was tracked for
duration <-difftime(max_time$time, min_time$time, units = "days"); duration
#' #199122325 has a data point that occurs over water, the filter doesn't delete this value
test <- ck_tanz_data %>% filter(id == "#199122325")
plot(test$long, test$lat)
ck_tanz_data <- ck_tanz_data  %>%
filter(!((id == "#199122325" & lat < -10)))
ck_tanz_data <- ck_tanz_data  %>%
filter(!((id == "#199122325" & long < 30)))
test <- ck_tanz_data %>% filter(id == "#199122325")
plot(test$long, test$lat)
# try the amt package
trk <-
mk_track(
ck_tanz_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326")
) %>%
transform_coords(
sp::CRS(
#' we can transform the CRS of the data to an equal area projection
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
#' summarise the sampling rate
data_summary <- trk %>% nest(-id) %>% mutate(sr = map(data, summarize_sampling_rate)) %>%
dplyr::select(id, sr) %>% unnest %>% arrange(id)
#' measure the time difference between points for each bird ID using dplyr
#' - Group your data by ID
#' - Compute time diffs between each timestamp in your group (the 1st time diff is NA)
#' - Create a new ID that counts no. of prior time gaps that are large (e.g. > 24 hours)
#' - Split the ID into newID by using an underscore separator
length(levels(as.factor(trk$id)))
levels(as.factor(trk$id))
#' need to add the arrange function here otherwise the order gets messed up
trk2 <- trk %>%
group_by(id) %>%
mutate(timeDiff = c(NA, difftime(tail(t_, -1), head(t_, -1), units = "hours"))) %>%
mutate(newID = paste(id, cumsum(!is.na(timeDiff) &
timeDiff > 24), sep = "_")) %>% arrange(id, t_) %>%
ungroup()
head(trk2)
tail(trk2)
#' check the number of newIDs
levels(as.factor(trk2$newID))
length(levels(as.factor(trk2$newID)))
#' how long are the tracks now that some of them have been split
sapply(split(trk2$x_, trk2$newID), length)
#' create a trajectory object using adehabitatLT
trk_ltraj <-
as.ltraj(xy = trk2[, c("x_", "y_")],
date = trk2$t_,
id = trk2$newID)
#' rediscretization of the trajectory
tstep <-
14400 # time step we want for the rediscretization, in seconds, 14400 secs = 4 hours
newtr <- redisltraj(trk_ltraj, u = tstep, type = "time")
head(newtr[1])
head(newtr[5])
class(newtr)
#' convert to class data frame
trk3 <- ld(newtr)
head(trk3)
class(trk3$date)
#' we should group the IDs that were split if they had big gaps back together into their original ID structure
#' this involves accessing the name of the new ID that occurs before the underscore
trk3 <- separate(trk3,
col = id,
sep = "_",
into = c("ID", "NA"))
head(trk3)
levels(as.factor(trk3$ID))
length(levels(as.factor(trk3$ID)))
#' remove the resultant NA column that occurs after the split
trk3 <- dplyr::select(trk3, x, y, date, ID)
head(trk3)
#' turn it back into a trk
trk4 <-
mk_track(
trk3,
.x = x,
.y = y,
.t = date,
id = ID,
crs = CRS(
"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
)
)
trk4
#' Calculate home range size for data that is regularised
mcps <- trk4 %>% nest(-id) %>%
mutate(mcparea = map(data, ~ hr_mcp(., levels = c(0.95)) %>% hr_area)) %>%
dplyr::select(id, mcparea) %>% unnest()
mcps$area <- mcps$area / 1000000
mcp_95 <- mcps %>% arrange(id)
mcp_95
#' Same for KDE
kde <- trk4 %>% nest(-id) %>%
mutate(kdearea = map(data, ~ hr_kde(., levels = c(0.95)) %>% hr_area)) %>%
dplyr::select(id, kdearea) %>% unnest()
kde$kdearea <-  kde$kdearea / 1000000
kde_95 <- kde %>% arrange(id)
kde_95
# set the time column
levels(factor(ck_tanz_data$id))
#########################################################################
#' Vulture comparative analysis
#' tutorials here https://www.jessesadler.com/post/gis-with-r-intro/
#' and here https://www.r-spatial.org/
#' 06 November 2018
#' 1_load_data - this loads in all of the tracking data and binds it
#########################################################################
#' Load the required packages
library(readr)
library(tidyverse)
#' Section 1: Load the data ----
data_path <- "raw_data"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
length(files)
mydata1 <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
mydata1$long <- as.numeric(mydata1$long)
mydata1$lat <- as.numeric(mydata1$lat)
mydata <- mydata1 %>% drop_na()
rm(mydata1)
#' filter the data to remove obvious outliers
mydata <- dplyr::filter(mydata1, lat < 20 & lat > -40 & long > 15 & long < 50)
head(mydata)
tail(mydata)
summary(mydata)
str(mydata)
levels(as.factor(mydata$study))
library(lubridate)
library(SDLfilter)
library(amt)
library(sp)
# Swaziland Vulture Tracking Dataset
library(lubridate)
library(SDLfilter)
library(amt)
library(sp)
# swazi
# select swazi data which is the data we tracked in Swaziland
swazi_data <- filter(mydata, study == "swazi")
swazi_data
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier).
ind2<-swazi_data %>% dplyr::select(time, long, lat, id) %>%
duplicated
sum(ind2)
# remove them
swazi_data$dups <- ind2
swazi_data <- filter(swazi_data,dups=="FALSE")
swazi_data
# set the time column
levels(factor(swazi_data$id))
# can look at an individual level with
(filter(swazi_data,id=="ID1"))
# all of the data is in the format of day-month-year
swazi_data$New_time<-parse_date_time(x=swazi_data$time,c("%d/%m/%Y %H:%M"))
# keep only the new time data
swazi_data <- dplyr::select(swazi_data, New_time,long,lat,id,species,study)
swazi_data <- rename(swazi_data, time = New_time)
swazi_data
#' estimate vmax for threshold speed
#' names(swazi_data)[names(swazi_data) == 'time'] <- 'DateTime'
#' speed.est.data <- swazi_data %>% filter(id == "ID2") %>%  select(id,DateTime,lat,long)
#' speed.est.data$qi = 5
#' est.vmax(sdata = data.frame(speed.est.data))
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
names(swazi_data)[names(swazi_data) == 'time'] <- 'DateTime'
SDLfilterData<-ddfilter.speed(data.frame(swazi_data), vmax = 100, method = 1)
length(SDLfilterData$DateTime)
#' rename everything as before
swazi_data <- SDLfilterData
names(swazi_data)[names(swazi_data) == 'DateTime'] <- 'time'
# check the minimum time and the maximum time
min_time <- swazi_data %>% group_by(id) %>% slice(which.min(time))
data.frame(min_time)
max_time <- swazi_data %>% group_by(id) %>% slice(which.max(time))
data.frame(max_time)
#' determine the length of time each bird was tracked for
duration <- difftime(max_time$time, min_time$time, units = "days");duration
#' export the cleaned tracks
#' write the function
customFun  = function(DF) {
write.csv(DF,paste0("",unique(DF$id),".csv"),row.names = FALSE)
return(DF)
}
#' try the amt package
trk <-
mk_track(
swazi_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326"))  %>%
transform_coords(
sp::CRS( #' we can transform the CRS of the data to an equal area projection
#' https://epsg.io/102022
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
#' summarise the sampling rate
data_summary <- trk %>% nest(-id) %>% mutate(sr = map(data, summarize_sampling_rate)) %>%
dplyr::select(id, sr) %>% unnest %>% arrange(id) ; data_summary
length(levels(as.factor(trk$id)))
#' need to add the arrange function here otherwise the order gets messed up
trk2 <- trk %>%
group_by(id) %>%
mutate(timeDiff = c(NA, difftime(tail(t_, -1), head(t_, -1), units = "hours"))) %>%
mutate(newID = paste(id, cumsum(!is.na(timeDiff) &
timeDiff > 24), sep = "_")) %>% arrange(id, t_) %>%
ungroup()
head(trk2)
tail(trk2)
#' check the number of newIDs
levels(as.factor(trk2$newID))
length(levels(as.factor(trk2$newID)))
#' how long are the tracks now that some of them have been split
sapply(split(trk2$x_, trk2$newID), length)
#' need to add the arrange function here otherwise the order gets messed up
trk2 <- trk %>%
group_by(id) %>%
mutate(timeDiff = c(NA, difftime(tail(t_, -1), head(t_, -1), units = "hours"))) %>%
mutate(newID = paste(id, cumsum(!is.na(timeDiff) &
timeDiff > 24), sep = "_")) %>% arrange(id, t_) %>%
ungroup()
head(trk2)
tail(trk2)
max(trk2$timeDiff)
max(trk2$timeDiff,na.rm = T)
#' check the number of newIDs
levels(as.factor(trk2$newID))
length(levels(as.factor(trk2$newID)))
#' how long are the tracks now that some of them have been split
sapply(split(trk2$x_, trk2$newID), length)
#' create a trajectory object using adehabitatLT
trk_ltraj <-
as.ltraj(xy = trk2[, c("x_", "y_")],
date = trk2$t_,
id = trk2$newID)
library(adehabitatLT)
# select swazi data which is the data we tracked in Swaziland
swazi_data <- filter(mydata, study == "swazi")
swazi_data
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier).
ind2<-swazi_data %>% dplyr::select(time, long, lat, id) %>%
duplicated
sum(ind2)
# remove them
swazi_data$dups <- ind2
swazi_data <- filter(swazi_data,dups=="FALSE")
swazi_data
# set the time column
levels(factor(swazi_data$id))
# can look at an individual level with
(filter(swazi_data,id=="ID1"))
# all of the data is in the format of day-month-year
swazi_data$New_time<-parse_date_time(x=swazi_data$time,c("%d/%m/%Y %H:%M"))
# keep only the new time data
swazi_data <- dplyr::select(swazi_data, New_time,long,lat,id,species,study)
swazi_data <- rename(swazi_data, time = New_time)
swazi_data
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
names(swazi_data)[names(swazi_data) == 'time'] <- 'DateTime'
SDLfilterData<-ddfilter.speed(data.frame(swazi_data), vmax = 100, method = 1)
length(SDLfilterData$DateTime)
#' rename everything as before
swazi_data <- SDLfilterData
names(swazi_data)[names(swazi_data) == 'DateTime'] <- 'time'
# check the minimum time and the maximum time
min_time <- swazi_data %>% group_by(id) %>% slice(which.min(time))
data.frame(min_time)
max_time <- swazi_data %>% group_by(id) %>% slice(which.max(time))
data.frame(max_time)
#' determine the length of time each bird was tracked for
duration <- difftime(max_time$time, min_time$time, units = "days");duration
#' try the amt package
trk <-
mk_track(
swazi_data,
.x = long,
.y = lat,
.t = time,
id = id,
species = species,
crs = CRS("+init=epsg:4326"))  %>%
transform_coords(
sp::CRS( #' we can transform the CRS of the data to an equal area projection
#' https://epsg.io/102022
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
#' summarise the sampling rate
data_summary <- trk %>% nest(-id) %>% mutate(sr = map(data, summarize_sampling_rate)) %>%
dplyr::select(id, sr) %>% unnest %>% arrange(id) ; data_summary
length(levels(as.factor(trk$id)))
#' need to add the arrange function here otherwise the order gets messed up
trk2 <- trk %>%
group_by(id) %>%
mutate(timeDiff = c(NA, difftime(tail(t_, -1), head(t_, -1), units = "hours"))) %>%
mutate(newID = paste(id, cumsum(!is.na(timeDiff) &
timeDiff > 24), sep = "_")) %>% arrange(id, t_) %>%
ungroup()
head(trk2)
tail(trk2)
#' check the number of newIDs
levels(as.factor(trk2$newID))
length(levels(as.factor(trk2$newID)))
#' how long are the tracks now that some of them have been split
sapply(split(trk2$x_, trk2$newID), length)
#' create a trajectory object using adehabitatLT
trk_ltraj <-
as.ltraj(xy = trk2[, c("x_", "y_")],
date = trk2$t_,
id = trk2$newID)
#' rediscretization of the trajectory
tstep <-
14400 # time step we want for the rediscretization, in seconds, 14400 secs = 4 hours
newtr <- redisltraj(trk_ltraj, u = tstep, type = "time")
head(newtr[1])
head(newtr[5])
class(newtr)
head(newtr[2])
class(newtr)
#' convert to class data frame
trk3 <- ld(newtr)
head(trk3)
class(trk3$date)
#' we should group the IDs that were split if they had big gaps back together into their original ID structure
#' this involves accessing the name of the new ID that occurs before the underscore
trk3 <- separate(trk3,
col = id,
sep = "_",
into = c("ID", "NA"))
head(trk3)
levels(as.factor(trk3$ID))
length(levels(as.factor(trk3$ID)))
#' remove the resultant NA column that occurs after the split
trk3 <- dplyr::select(trk3, x, y, date, ID)
head(trk3)
#' turn it back into a trk
trk4 <-
mk_track(
trk3,
.x = x,
.y = y,
.t = date,
id = ID,
crs = CRS(
"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
)
)
trk4
#' Calculate home range size for data that is regularised
mcps <- trk4 %>% nest(-id) %>%
mutate(mcparea = map(data, ~ hr_mcp(., levels = c(0.95)) %>% hr_area)) %>%
dplyr::select(id, mcparea) %>% unnest()
mcps$area <- mcps$area / 1000000
mcp_95 <- mcps %>% arrange(id)
mcp_95
#' Same for KDE
kde <- trk4 %>% nest(-id) %>%
mutate(kdearea = map(data, ~ hr_kde(., levels = c(0.95)) %>% hr_area)) %>%
dplyr::select(id, kdearea) %>% unnest()
kde$kdearea <-  kde$kdearea / 1000000
kde_95 <- kde %>% arrange(id)
kde_95
#' combine the summary stats
data_summary$duration <- duration
data_summary$min_time <- min_time$time
data_summary$max_time <- max_time$time
data_summary$kde <- kde_95$kdearea
data_summary$study <- "Swazi"
data_summary$species <- min_time$species
data_summary
data_summary$mcps <- mcp_95$area
#' can export this data summary
write.csv(data_summary, file="track_resolution_summary/swazi_data_summary.csv", row.names = FALSE)
