head(trk)
# turn the tracks into something the sf package can work with
trk <- trk %>% dplyr::select(x_, y_,id)
trk
pts <- st_as_sf (trk, coords = c ("x_", "y_"), crs = 4326)
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' filter out one track
trk <- trk %>% filter(id == "ID1")
trk
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.sp
trk
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
mydata.sp
coordinates(mydata.sp) <- c("x_", "y_")
mydata.sp
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
#' filter out one track
trk <- trk %>% filter(id == "ID2")
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
setwd("C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\vulture_habitat\\Regularised vulture tracks")   # path to the data
mydata <- read.csv("swazi_reg.csv", header = TRUE)
head(mydata)
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)  %>%
transform_coords(sp::CRS("+init=epsg:4326"))
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 4326)
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' filter out one track
trk <- trk %>% filter(id == "ID1")
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
setwd("C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\vulture_habitat\\Regularised vulture tracks")   # path to the data
mydata <- read.csv("swazi_reg.csv", header = TRUE)
head(mydata)
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)  %>%
transform_coords(sp::CRS("+init=epsg:4326"))
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 4326)
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' calculate overlap with home range
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
mydata.sp
#' filter out one track
trk <- trk %>% filter(id == "ID1") %>% droplevels()
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
# look at overlap
kernel.sf <- st_as_sf(mydata.kernel.poly)
st_crs(kernel.sf) = 4326
#' this works for all of the IDs
intersection <- st_intersection(kernel.sf, swazi_pa_data)
intersection_area <-  sum(st_area(intersection[intersection]))
intersection_area
504005258 /1e+6
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "m2")
print(mydata.kernel.poly)  # returns the area of each polygon
plot(mydata.kernel.poly)
kernel.ref
mydata.kernel.poly
mydata.sp
st_crs(kernel.sf) =   "+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
st_transform(kernel.sf) =   "+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
library(sf)
st_transform(kernel.sf) =   "+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
st_crs(kernel.sf) = 102022
kernel.sf
# reproject data
# swazi_pa_data <- st_transform(swazi_pa_data, 4326)
swazi_pa_data <- st_transform(swazi_pa_data, 102022)
# calculate percentage of land inside protected areas (km^2)
statistic <- swazi_pa_data %>%
as.data.frame() %>%
#select(-geometry) %>%
group_by(IUCN_CAT) %>%
summarize(area_km = sum(AREA_KM2)) %>%
mutate(percentage = (area_km / sum(area_km)) * 100)
sum(statistic$area_km)
#' load in a track
setwd("C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\vulture_habitat\\Regularised vulture tracks")   # path to the data
mydata <- read.csv("swazi_reg.csv", header = TRUE)
head(mydata)
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
#  )  %>%
#  transform_coords(sp::CRS("+init=epsg:4326"))
)
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 102022) # 4326
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' filter out one track
trk <- trk %>% filter(id == "ID1") %>% droplevels()
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "m2")
print(mydata.kernel.poly)  # returns the area of each polygon
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
# look at overlap
kernel.sf <- st_as_sf(mydata.kernel.poly)
st_crs(kernel.sf) = 102022
#' this works for all of the IDs
intersection <- st_intersection(kernel.sf, swazi_pa_data)
intersection_area <-  sum(st_area(intersection[intersection]))
intersection_area
504005258 /1e+6 # to get in km2
#' filter out one track
trk <- trk %>% filter(id == "ID2") %>% droplevels()
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
#  )  %>%
#  transform_coords(sp::CRS("+init=epsg:4326"))
)
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 102022) # 4326
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' filter out one track
trk <- trk %>% filter(id == "ID2") %>% droplevels()
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
kernel.sf
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
#  )  %>%
#  transform_coords(sp::CRS("+init=epsg:4326"))
)
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 102022) # 4326
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' calculate overlap with home range
#' filter out one track
trk <- trk %>% filter(id == "ID2") %>% droplevels()
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
# look at overlap
kernel.sf <- st_as_sf(mydata.kernel.poly)
st_crs(kernel.sf) = 102022
#' this works for all of the IDs
intersection <- st_intersection(kernel.sf, swazi_pa_data)
intersection_area <-  sum(st_area(intersection[intersection]))
intersection_area
734901991/1e+6
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
#  )  %>%
#  transform_coords(sp::CRS("+init=epsg:4326"))
)
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 102022) # 4326
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' calculate overlap with home range
#' filter out one track
trk <- trk %>% filter(id == "ID1") %>% droplevels()
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
# look at overlap
kernel.sf <- st_as_sf(mydata.kernel.poly)
st_crs(kernel.sf) = 102022
#' this works for all of the IDs
intersection <- st_intersection(kernel.sf, swazi_pa_data)
intersection_area <-  sum(st_area(intersection[intersection]))
intersection_area
504005258 /1e+6 # ID1
734901991/1e+6 # ID2
# calculate percentage of land inside protected areas (km^2)
statistic <- swazi_pa_data %>%
as.data.frame() %>%
#select(-geometry) %>%
group_by(IUCN_CAT) %>%
summarize(area_km = sum(AREA_KM2)) %>%
mutate(percentage = (area_km / sum(area_km)) * 100)
sum(statistic$area_km)
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
#  )  %>%
#  transform_coords(sp::CRS("+init=epsg:4326"))
)
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 102022) # 4326
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
#' filter out one track
trk <- trk %>% filter(id == "ID2") %>% droplevels()
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 50, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
# look at overlap
kernel.sf <- st_as_sf(mydata.kernel.poly)
st_crs(kernel.sf) = 102022
#' this works for all of the IDs
intersection <- st_intersection(kernel.sf, swazi_pa_data)
intersection_area <-  sum(st_area(intersection[intersection]))
intersection_area
# transform from albers to lat long
mydata$t_<-parse_date_time(x=mydata$t_,c("%Y-%m-%d %H:%M:%S"))
trk <-
mk_track(
mydata,
.x = x_,
.y = y_,
.t = t_,
id = id,
crs = CRS(
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
#  )  %>%
#  transform_coords(sp::CRS("+init=epsg:4326"))
)
head(trk)
# turn the tracks into something the sf package can work with
sf_trk <- trk %>% dplyr::select(x_, y_,id)
sf_trk
pts <- st_as_sf (sf_trk, coords = c ("x_", "y_"), crs = 102022) # 4326
pts
# count the number of points that overlap with protected areas
res <- st_intersects (pts, swazi_pa_data)
# get the proportion of those
length (unlist (res)) / nrow (pts)
# Keep only the id column and the x and y coordinates
mydata.sp <- trk[, c("id", "x_", "y_")]
coordinates(mydata.sp) <- c("x_", "y_")
# calculate the home range kde
kernel.ref <- kernelUD(mydata.sp, h = "href")  # href = the reference bandwidth
mydata.kernel.poly <- getverticeshr(kernel.ref, percent = 95, unout = "km2")
print(mydata.kernel.poly)  # returns the area of each polygon
# look at overlap
kernel.sf <- st_as_sf(mydata.kernel.poly)
st_crs(kernel.sf) = 102022
#' this works for all of the IDs
intersection <- st_intersection(kernel.sf, swazi_pa_data)
intersection_area <-  sum(st_area(intersection[intersection]))
intersection_area
504005258 /1e+6 # ID1
734901991/1e+6 # ID2
#' look at the intersection of each
#' create a function to do it all together
calculate_area <- function(x){
intersection <- st_intersection(x, swazi_pa_data)
intersection_area <- sum(st_area(intersection))
print(intersection_area)
}
#' use lapply on it
lapply(ncSplit, calculate_area)
kernel.sf
#' use lapply on it
lapply(kernel.sf, calculate_area)
kernel.sf
swazi_pa_data
# Set field to split on
splitField <- "id"
ncSplit <- split(nc, f = nc[[splitField]])
# Set field to split on
splitField <- "id"
ncSplit <- split(kernel.sf, f = kernel.sf[[splitField]])
ncSplit
#' use lapply on it
lapply(kernel.sf, calculate_area)
#' use lapply on it
lapply(ncSplit, calculate_area)
734901991/1e+6
504002253/1e+6
plot(swazi_pa_data)
plot(swazi_pa_data[,4])
plot(kernel.sf)
plot(kernel.sf$area)
plot(kernel.sf$id)
plot(kernel.sf$geometry)
#' plots
plot(kernel.sf$geometry)
#' plots
plot(kernel.sf$geometry, col=kernel.sf$id)
#' plots
plot(kernel.sf$geometry)
#' plots
plot(swazi_pa_data[,4])
#' plots
plot(swazi_pa_data[,4] , axes = TRUE)
plot(kernel.sf$geometry, axes = TRUE)
#' plots
plot(swazi_pa_data[,4] , axes = TRUE)
plot(kernel.sf$geometry, axes = TRUE, add = TRUE)
library(ggmap)
library(ggmap)
ggmap(map) +
aes(x=mydata$x_, y=mydata$y_) +
stat_density_2d(aes(fill = ..level..), dfexp, geom="polygon") +
geom_point(data=dfexp, position="jitter", alpha=.2, colour="white")
library(leaflet)
kernel.sf
mydata.kernel.poly
sdf_poly <- spTransform(mydata.kernel.poly, CRS('+init=epsg:4326'))
mydata.kernel.poly
leaflet(mydata.kernel.poly) %>% addTiles() %>%
addPolygons()
sdf_poly <- spTransform(mydata.kernel.poly, CRS('+init=epsg:4326'))
?CRS
mydata.kernel.poly
CRS(mydata.kernel.poly)
is.crs(mydata.kernel.poly)
# first convert to longitude and latitude
proj4string(mydata.kernel.poly) <- CRS("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
sdf_poly <- spTransform(mydata.kernel.poly, CRS('+init=epsg:4326'))
leaflet(mydata.kernel.poly) %>% addTiles() %>%
addPolygons()
# first convert to longitude and latitude
proj4string(mydata.kernel.poly) <- CRS("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
sdf_poly <- spTransform(mydata.kernel.poly, CRS('+init=epsg:4326'))
leaflet(sdf_poly) %>% addTiles() %>%
addPolygons()
#' this works for all of the IDs if you don't filter by a specific individual
#' else it gives the value for the individual
intersection <- st_intersection(swazi_pa_data, kernel.sf)
intersection
intersection_area <-  sum(st_area(intersection[intersection]))
#' this works for all of the IDs if you don't filter by a specific individual
#' else it gives the value for the individual
intersection <- st_intersection(kernel.sf, swazi_pa_data)
intersection_area <-  sum(st_area(intersection[intersection]))
intersection_area
print(mydata.kernel.poly)  # returns the area of each polygon
print(mydata.kernel.poly)  # returns the area of each polygon
#' use lapply on it
lapply(ncSplit, calculate_area)
#' what's the proportion of coverage?
48643.84/(504002253/1e+6)
#' what's the proportion of coverage?
48643.84/(504002253/1e+6) *100
(504002253/1e+6)
#' what's the proportion of coverage?
(504002253/1e+6) / 48643.84
(734901991/1e+6) / 220454.44
#' what's the proportion of coverage?
(504002253/1e+6) / 48643.84 * 100
(734901991/1e+6) / 220454.44 * 100
